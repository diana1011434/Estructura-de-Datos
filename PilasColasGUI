package PilasColasGUI;
/**
 * Autor: Ing. Diana Arias
 * Descripci√≥n: Aplicaci√≥n gr√°fica para gestionar pedidos y devoluciones utilizando
 * estructuras de datos (Colas y Pilas). La interfaz permite interactuar con los datos
 * visualmente y con botones intuitivos.
 */

// Importaci√≥n de librer√≠as necesarias para la interfaz gr√°fica y estructuras de datos
import javax.swing.*;   // Librer√≠a para crear la interfaz gr√°fica (ventanas, botones, cuadros de di√°logo)
import java.awt.*;      // Librer√≠a para manejo de gr√°ficos, colores y dise√±o
import java.util.LinkedList; // Implementaci√≥n de una cola (FIFO - First In, First Out)
import java.util.Stack; // Implementaci√≥n de una pila (LIFO - Last In, First Out)

public class PilasColasGUI {
    
    // Ventana principal de la aplicaci√≥n
    private JFrame frame;

    // √Årea de texto donde se muestran las operaciones realizadas
    private JTextArea textArea;

    // Estructura de datos tipo Pila para almacenar devoluciones (LIFO)
    private Stack<String> devoluciones;

    // Estructura de datos tipo Cola para almacenar pedidos (FIFO)
    private LinkedList<String> pedidos;

    // Panel donde se dibujar√°n gr√°ficamente los pedidos y devoluciones
    private DibujosPanel dibujosPanel;

    /**
     * Constructor de la clase, inicializa las estructuras de datos y la interfaz gr√°fica.
     */
    public PilasColasGUI() {
        devoluciones = new Stack<>(); // Inicializaci√≥n de la pila de devoluciones
        pedidos = new LinkedList<>(); // Inicializaci√≥n de la cola de pedidos
        initialize(); // Llamado al m√©todo que construye la interfaz gr√°fica
    }

    /**
     * M√©todo que configura la interfaz gr√°fica y los componentes de la aplicaci√≥n.
     */
    private void initialize() {
        // Creaci√≥n de la ventana principal con t√≠tulo
        frame = new JFrame("Gesti√≥n de Pedidos y Devoluciones - Ing. Diana Arias");

        // Configuraci√≥n para cerrar la aplicaci√≥n al presionar la "X"
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(700, 500); // Dimensiones de la ventana
        frame.setLayout(new BorderLayout()); // Establece el dise√±o en la ventana

        // Cambia el color de fondo de la ventana principal
        frame.getContentPane().setBackground(new Color(230, 240, 255));

        // √Årea de texto para mostrar las operaciones realizadas
        textArea = new JTextArea();
        textArea.setEditable(false); // Evita que el usuario edite el texto manualmente
        frame.add(new JScrollPane(textArea), BorderLayout.EAST); // Se agrega con desplazamiento

        // Panel donde se dibujar√°n gr√°ficamente las pilas y colas
        dibujosPanel = new DibujosPanel();
        frame.add(dibujosPanel, BorderLayout.CENTER);

        // Creaci√≥n del panel de botones con distribuci√≥n de 2 filas y 3 columnas
        JPanel panel = new JPanel(new GridLayout(2, 3));

        // Creaci√≥n de botones con texto y emojis para una interfaz m√°s intuitiva
        JButton agregarPedidoButton = new JButton("‚ûï Agregar Pedido");
        JButton despacharPedidoButton = new JButton("üöö Despachar Pedido");
        JButton agregarDevolucionButton = new JButton("üîÑ Agregar Devoluci√≥n");
        JButton procesarDevolucionButton = new JButton("‚úÖ Procesar Devoluci√≥n");
        JButton limpiarButton = new JButton("üóëÔ∏è Limpiar");

        // Agregar botones al panel
        panel.add(agregarPedidoButton);
        panel.add(despacharPedidoButton);
        panel.add(agregarDevolucionButton);
        panel.add(procesarDevolucionButton);
        panel.add(limpiarButton);

        // Agregar el panel de botones en la parte inferior de la ventana
        frame.add(panel, BorderLayout.SOUTH);

        // Asignaci√≥n de eventos a cada bot√≥n para realizar las operaciones correspondientes
        agregarPedidoButton.addActionListener(e -> agregarPedido());
        despacharPedidoButton.addActionListener(e -> despacharPedido());
        agregarDevolucionButton.addActionListener(e -> agregarDevolucion());
        procesarDevolucionButton.addActionListener(e -> procesarDevolucion());
        limpiarButton.addActionListener(e -> limpiarDatos());

        // Hacer visible la ventana
        frame.setVisible(true);
    }

    /**
     * M√©todo para agregar un pedido a la cola (FIFO).
     */
    private void agregarPedido() {
        // Solicita al usuario que ingrese el n√∫mero del pedido
        String pedido = JOptionPane.showInputDialog("Ingrese el n√∫mero del pedido:");
        
        // Verifica que el usuario no haya dejado el campo vac√≠o
        if (pedido != null && !pedido.trim().isEmpty()) {
            pedidos.add(pedido); // Agrega el pedido a la cola
            actualizarTexto("Nuevo pedido agregado: " + pedido); // Muestra mensaje en el √°rea de texto
            dibujosPanel.repaint(); // Redibuja la interfaz gr√°fica
        }
    }

    /**
     * M√©todo para despachar un pedido de la cola (FIFO).
     */
    private void despacharPedido() {
        // Verifica si hay pedidos en la cola
        if (!pedidos.isEmpty()) {
            String pedido = pedidos.removeFirst(); // Extrae el primer pedido de la cola
            actualizarTexto("Pedido despachado: " + pedido); // Muestra mensaje en el √°rea de texto
            dibujosPanel.repaint(); // Redibuja la interfaz gr√°fica
        } else {
            JOptionPane.showMessageDialog(frame, "No hay pedidos pendientes.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }

    /**
     * M√©todo para agregar una devoluci√≥n a la pila (LIFO).
     */
    private void agregarDevolucion() {
        String devolucion = JOptionPane.showInputDialog("Ingrese el n√∫mero de devoluci√≥n:");
        
        if (devolucion != null && !devolucion.trim().isEmpty()) {
            devoluciones.push(devolucion); // Agrega la devoluci√≥n a la pila
            actualizarTexto("Nueva devoluci√≥n registrada: " + devolucion);
            dibujosPanel.repaint();
        }
    }

    /**
     * M√©todo para procesar una devoluci√≥n de la pila (LIFO).
     */
    private void procesarDevolucion() {
        if (!devoluciones.isEmpty()) {
            String devolucion = devoluciones.pop(); // Extrae el √∫ltimo elemento de la pila
            actualizarTexto("Devoluci√≥n procesada: " + devolucion);
            dibujosPanel.repaint();
        } else {
            JOptionPane.showMessageDialog(frame, "No hay devoluciones pendientes.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }

    /**
     * M√©todo para limpiar todas las estructuras de datos.
     */
    private void limpiarDatos() {
        pedidos.clear(); // Elimina todos los elementos de la cola
        devoluciones.clear(); // Elimina todos los elementos de la pila
        actualizarTexto("Pedidos y devoluciones limpiados.");
        dibujosPanel.repaint();
    }

    /**
     * M√©todo para actualizar el √°rea de texto con los mensajes generados.
     */
    private void actualizarTexto(String mensaje) {
        textArea.append(mensaje + "\n");
    }

    /**
     * Clase interna que permite dibujar gr√°ficamente la pila y la cola.
     */
    private class DibujosPanel extends JPanel {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            g.setColor(Color.BLACK);
            g.drawString("Cola (Pedidos)", 50, 20);
            g.drawString("Pila (Devoluciones)", 350, 20);

            // Dibujar la cola (Pedidos)
            int x = 50;
            for (String pedido : pedidos) {
                g.setColor(new Color(100, 200, 100));
                g.fillRect(x, 50, 80, 40);
                g.setColor(Color.BLACK);
                g.drawString(pedido, x + 30, 75);
                x += 90;
            }

            // Dibujar la pila (Devoluciones)
            int y = 50;
            for (String devolucion : devoluciones) {
                g.setColor(new Color(200, 100, 100));
                g.fillRect(350, y, 80, 40);
                g.setColor(Color.BLACK);
                g.drawString(devolucion, 380, y + 25);
                y += 50;
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(PilasColasGUI::new);
    }
}
