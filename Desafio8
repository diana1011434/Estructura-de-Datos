Desafío 8: Grafo - Recorrido BFS (Amplitud)
Pregunta: ¿Qué estrategia utiliza BFS para recorrer un grafo y cómo garantiza que se visitan todos los nodos de la forma más corta posible? ¿Cuáles son las ventajas de BFS respecto a DFS en ciertos problemas?

Caso de Uso: Imagina un sistema de búsqueda en redes sociales, donde cada usuario es un nodo y las relaciones de amistad son aristas. Utiliza BFS para encontrar los amigos más cercanos de un usuario en un grafo.

Código en Java (BFS):
import java.util.*;

class Grafo {
    private Map<String, List<String>> adjList = new HashMap<>();

    public void agregarArista(String origen, String destino) {
        adjList.putIfAbsent(origen, new ArrayList<>());
        adjList.get(origen).add(destino);
    }

    public void bfs(String inicio) {
        Set<String> visitados = new HashSet<>();
        Queue<String> cola = new LinkedList<>();
        cola.add(inicio);
        visitados.add(inicio);

        while (!cola.isEmpty()) {
            String nodo = cola.poll();
            System.out.print(nodo + " ");
            for (String vecino : adjList.getOrDefault(nodo, new ArrayList<>())) {
                if (!visitados.contains(vecino)) {
                    cola.add(vecino);
                    visitados.add(vecino);
                }
            }
        }
    }

    public static void main(String[] args) {
        Grafo grafo = new Grafo();
        grafo.agregarArista("A", "B");
        grafo.agregarArista("A", "C");
        grafo.agregarArista("B", "D");
        grafo.bfs("A");
    }
}
