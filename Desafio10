Desafío 10: Árbol de Expansión Mínima con Prim
Pregunta: ¿Cómo garantiza el algoritmo Prim que construye el árbol de expansión mínima? ¿Qué estructuras de datos son esenciales para implementar el algoritmo eficientemente?

Caso de Uso: Imagina que estás trabajando en un sistema de redes de comunicaciones y necesitas minimizar el costo de conectar todas las estaciones. Usa Prim para calcular la red mínima.
import java.util.*;

class Grafo {
    private Map<Integer, List<int[]>> adjList = new HashMap<>();

    public void agregarArista(int origen, int destino, int peso) {
        adjList.putIfAbsent(origen, new ArrayList<>());
        adjList.get(origen).add(new int[]{destino, peso});
    }

    public void prim(int inicio) {
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));
        Set<Integer> visitados = new HashSet<>();
        pq.add(new int[]{inicio, 0});

        while (!pq.isEmpty()) {
            int[] arista = pq.poll();
            int nodo = arista[0], peso = arista[1];
            if (visitados.contains(nodo)) continue;

            visitados.add(nodo);
            System.out.println("Nodo: " + nodo + ", Peso: " + peso);

            for (int[] vecino : adjList.getOrDefault(nodo, new ArrayList<>())) {
                if (!visitados.contains(vecino[0])) {
                    pq.add(vecino);
                }
            }
        }
    }

    public static void main(String[] args) {
        Grafo grafo = new Grafo();
        grafo.agregarArista(0, 1, 10);
        grafo.agregarArista(0, 2, 6);
        grafo.agregarArista(1, 2, 5);
        grafo.prim(0);
    }
}
